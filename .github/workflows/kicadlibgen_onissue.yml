name: Kicad Library Request Issue Handler

on:
  issues:
    types:
      - opened

jobs:
  issue_created:
    runs-on: ubuntu-latest

    concurrency:
      group: my-workflow-${{ github.ref }}

    steps:
    - name: Check for Libgen Label
      run: |
        issue_labels=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" | jq -r '.[].name')
        
        if [[ "$issue_labels" == *"libgen"* ]]; then
          echo "Issue has the 'libgen' label."
        else
          echo "Issue does not have the 'libgen' label."
          exit 1
        fi

    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: '3.10' # optional

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r _kicad-libgen/requirements.txt

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Download Files
      run: wget https://yaqwsx.github.io/jlcparts/data/cache.zip https://yaqwsx.github.io/jlcparts/data/cache.z0{1..8} || true
      working-directory: ${{ github.workspace }}

    - name: Unzip Files
      if: steps.cache.outputs.cache-hit != 'true'
      run: 7z x cache.zip
      working-directory: ${{ github.workspace }}

    - name: Extract Part Number
      id: extract
      run: |
        issue_body=${{ github.event.issue.body }}
        partnumber=$(echo "$issue_body" | yq eval '.[1].attributes.placeholder' -)
        echo "Part Number: $partnumber"

    - name: Run your action here
      id: run-script
      run: |
        output=$(python _kicad-libgen/main.py "${{ steps.extract.outputs.partnumber }}")
        echo "::set-output name=script-output::$output"

    - name: Move .kicad_mod files
      run: |
        files=$(find JLC2KiCad_lib/footprint -maxdepth 1 -type f -name "*.kicad_mod")
        if [ -n "$files" ]; then
          mv $files JLC2KiCad_lib/footprint/Library.pretty/
        fi
      working-directory: ${{ github.workspace }}

    - name: Set Git Config for Rebase
      run: git config pull.rebase true

    - name: Commit and push changes to main
      id: commit-and-push
      run: |
        comment="${{ github.event.issue.title }}"
        
        git config user.email "refried08oatmeal@icloud.com"
        git config user.name "Datenkrake"
        git checkout main  # Switch to the main branch
        git add .  # Stage all changes
        git commit -m "$comment"  # Commit changes with a message
        git pull # pull latest changes
        git push  # Push changes to the main branch

        commit_sha=$(git rev-parse HEAD)
        echo "::set-output name=commit-sha::$commit_sha"

        
    - name: Get commit link
      id: get-commit-link
      run: |
        commit_sha="${{ steps.commit-and-push.outputs.commit-sha }}"
        commit_link="https://github.com/${{ github.repository }}/commit/$commit_sha"
        echo "::set-output name=commit-output::$commit_link"

    - name: Update Issue Title
      run: |
        issue_number=${{ github.event.issue.number }}
        new_title="KiCad Library: ${{ github.event.issue.title }}"
        curl -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "{\"title\":\"${new_title}\"}" "https://api.github.com/repos/${{ github.repository }}/issues/${issue_number}"

    - name: Comment on the issue
      run: |
        issue_number=${{ github.event.issue.number }}  # Replace with the actual issue number
        comment=$(echo "${{ steps.run-script.outputs.script-output }}")
        commit_link=$(echo "${{ steps.get-commit-link.outputs.commit-output }}")
        body=$(echo "$comment Commit Link: $commit_link")
        json_body=$(jq -n --arg body "$body" '{body: $body}')

        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "$json_body" \
          "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/comments"
          
        

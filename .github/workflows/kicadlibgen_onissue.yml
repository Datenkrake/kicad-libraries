name: Kicad Library Request Issue Handler

on:
  issues:
    types:
      - opened

jobs:
  issue_created:
    runs-on: ubuntu-latest

    concurrency:
      group: my-workflow-${{ github.ref }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v4.7.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '3.10' # optional
        # File containing the Python version to use. Example: .python-version
        # python-version-file: # optional
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        # cache: pip # optional
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        # architecture: # optional
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        # check-latest: # optional
        # The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
        # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
        # Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies.
        # cache-dependency-path: # optional
        # Set this option if you want the action to update environment variables.
        # update-environment: # optional, default is true
        # When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython.
        # allow-prereleases: # optional

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r _kicad-libgen/requirements.txt

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Download Files
      run: wget https://yaqwsx.github.io/jlcparts/data/cache.zip https://yaqwsx.github.io/jlcparts/data/cache.z0{1..8} || true
      working-directory: ${{ github.workspace }}

    - name: Unzip Files
      run: 7z x cache.zip
      working-directory: ${{ github.workspace }}

    - name: Run your action here
      id: run-script
      # Add the steps or commands you want to run when an issue is created
      # For example, you can use a script or command to perform some actions.
      # Here's a basic example that echoes a message:
      run: |
        output=$(python _kicad-libgen/main.py "${{ github.event.issue.title }}")
        echo "::set-output name=script-output::$output"

    - name: Move .kicad_mod files
      run: |
        files=$(find JLC2KiCad_lib/footprint -maxdepth 1 -type f -name "*.kicad_mod")
        if [ -n "$files" ]; then
          mv $files JLC2KiCad_lib/footprint/Library.pretty/
        fi
      working-directory: ${{ github.workspace }}



    - name: Set Git Config for Rebase
      run: git config pull.rebase true

    - name: Commit and push changes to main
      id: commit-and-push
      run: |
        comment="${{ github.event.issue.title }}"
        
        git config user.email "refried08oatmeal@icloud.com"
        git config user.name "Datenkrake"
        git checkout main  # Switch to the main branch
        git add .  # Stage all changes
        git commit -m "$comment"  # Commit changes with a message
        git pull # pull latest changes
        git push  # Push changes to the main branch

        commit_sha=$(git rev-parse HEAD)
        echo "::set-output name=commit-sha::$commit_sha"

        
    - name: Get commit link
      id: get-commit-link
      run: |
        commit_sha="${{ steps.commit-and-push.outputs.commit-sha }}"
        commit_link="https://github.com/${{ github.repository }}/commit/$commit_sha"
        echo "::set-output name=commit-output::$commit_link"

    - name: Comment on the issue
      run: |
        issue_number=${{ github.event.issue.number }}  # Replace with the actual issue number
        comment=$(echo "${{ steps.run-script.outputs.script-output }}" | jq -R .)
        commit_link=$(echo "${{ steps.get-commit-link.outputs.commit-output }}" | jq -R .)
        body=$(echo "$comment Commit Link: $commit_link" | jq -R .)
        json_body=$(jq -n --arg body "$body" '{body: $body}')
      
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "$json_body" \
          "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/comments"
          
        
